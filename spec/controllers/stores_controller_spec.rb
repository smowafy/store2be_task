# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe StoresController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Store. As you add validations to Store, be sure to
  # adjust the attributes here as well.

  let(:valid_attributes) do
    {
      title: 'Store 1',
      city: 'City 1',
      street: 'Street 1'
    }
  end

  let(:incomplete_attributes) do
    {
      title: 'Incomplete store'
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # StoresController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    context 'when no filters are provided' do
      before do
        (1..10).each do |number|
          Store.create!(title: "Store #{number}", city: "City #{number}", street: "Street #{number}")
        end
      end

      let(:expected_response_body) do
        JSON.parse(file_fixture('stores_controller_get_index_response.json').read)
      end

      it 'returns a success response' do
        get :index, params: {}, session: valid_session
        expect(response).to be_successful
        expect(parsed_response).to eq(expected_response_body)
      end
    end

    context 'when filters are provided' do
      before do
        Store.create!(title: 'first second third', city: 'City 1', street: 'Street 1')
        Store.create!(title: 'second fourth fifth', city: 'City 2', street: 'Street 2')
        Store.create!(title: 'sixth seventh', city: 'City 3', street: 'Street 3')
      end

      context 'when filters are valid' do
        let(:expected_response_body) do
          [
            { title: 'first second third', city: 'City 1', street: 'Street 1' },
            { title: 'second fourth fifth', city: 'City 2', street: 'Street 2' }
          ].map(&:with_indifferent_access)
        end

        let(:filter_parameters) do
          {
            title: 'like:second',
            city: 'like:city'
          }
        end

        it 'should return only stores matching filters' do
          get :index, params: filter_parameters, session: valid_session
          expect(response).to be_successful
          expect(parsed_response).to eq(expected_response_body)
        end
      end

      context 'when fitlers are invalid' do
        let(:filter_parameters) do
          {
            title: 'lt:3',
            invalid: 'invalid'
          }
        end

        it 'should return a JSON response with error' do
          get :index, params: filter_parameters, session: valid_session
          expect(response).to have_http_status(:unprocessable_entity)
          expect(response.content_type).to eq('application/json')
        end
      end
    end
  end

  describe 'GET #show' do
    let(:expected_response_body) do
      { title: 'Store 1', city: 'City 1', street: 'Street 1' }.with_indifferent_access
    end

    it 'returns a success response' do
      store = Store.create! valid_attributes
      get :show, params: { id: store.to_param }, session: valid_session
      expect(response).to be_successful
      expect(parsed_response).to eq(expected_response_body)
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      let(:expected_response_body) do
        { title: 'Store 1', city: 'City 1', street: 'Street 1' }.with_indifferent_access
      end

      it 'creates a new Store' do
        expect do
          post :create, params: { store: valid_attributes }, session: valid_session
        end.to change(Store, :count).by(1)
      end

      it 'renders a JSON response with the new store' do
        post :create, params: { store: valid_attributes }, session: valid_session
        expect(response).to have_http_status(:created)
        expect(response.content_type).to eq('application/json')
        expect(response.location).to eq(store_url(Store.last))
        expect(parsed_response).to eq(expected_response_body)
      end
    end

    context 'with incomplete params' do
      it 'renders a JSON response with errors for the new store' do
        post :create, params: { store: incomplete_attributes }, session: valid_session
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json')
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) do
        {
          title: 'New store title'
        }
      end

      let(:expected_response_body) do
        { title: 'New store title', city: 'City 1', street: 'Street 1' }.with_indifferent_access
      end

      it 'updates the requested store' do
        store = Store.create! valid_attributes
        put :update, params: { id: store.to_param, store: new_attributes }, session: valid_session
        store.reload
        expect(store.title).to eq('New store title')
      end

      it 'renders a JSON response with the store' do
        store = Store.create! valid_attributes
        put :update, params: { id: store.to_param, store: new_attributes }, session: valid_session
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to eq('application/json')
        expect(parsed_response).to eq(expected_response_body)
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested store' do
      store = Store.create! valid_attributes
      expect do
        delete :destroy, params: { id: store.to_param }, session: valid_session
      end.to change(Store, :count).by(-1)
    end
  end
end
